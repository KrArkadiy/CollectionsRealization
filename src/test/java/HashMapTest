import org.junit.Test;

import static org.junit.Assert.*;

public class MyHashMapTest {

    private MyMap<String,Integer> mHM = new MyHashMap<>();
    private MyMap<Cat, String> map = new MyHashMap<>();

    private static class Cat {
        @Override
        public int hashCode() {
            return 1;
        }
    }

    @Test
    public void givenHashMapWhenInitializeThenItsEmpty(){
        assertEquals(0, mHM.getSize());
        assertNull(mHM.getValue("123"));
        assertFalse(mHM.containsKey("it's okey"));
        assertFalse(mHM.containsValue(123123));
    }

    @Test
    public void givenHashMapWhenPutElementsWithSameHashCodeThenValuesAreNotReplaced(){
        Cat cat = new Cat();
        Cat cat10 = new Cat();
        map.put(cat, "Nikkobaby");
        map.put(new Cat(), "Lola");
        map.put(new Cat(), "Katy");
        map.put(new Cat(), "Karma");
        map.put(new Cat(), "Run");
        map.put(new Cat(), "Test");
        map.put(new Cat(), "Puff");
        map.put(new Cat(), "Oops");
        assertTrue(map.containsValue("Nikkobaby"));
        assertTrue(map.containsValue("Lola"));
        assertTrue(map.containsValue("Katy"));
        assertTrue(map.containsValue("Karma"));
        assertTrue(map.containsValue("Run"));
        assertTrue(map.containsValue("Test"));
        assertTrue(map.containsValue("Puff"));
        assertTrue(map.containsValue("Oops"));
        assertFalse(map.containsValue("Marta"));
        assertFalse(map.containsKey(cat10));
        assertEquals( "Nikkobaby", map.getValue(cat));
    }

    @Test
    public void givenHashMapWithSeveralElementsWhenPutExtraElementsThenHashMapShouldContainTheseKeysAndValues() {
        mHM.put("SixteenthValue", 4798374);
        mHM.put("ABC", 675);
        mHM.put("Carmen", 414554);
        mHM.put("Katrin", 124785);
        mHM.put("Lady", 10099);
        mHM.put("Sick", 21476);
        mHM.put("AND", 11256717);
        assertEquals(7,mHM.getSize());
        assertTrue(mHM.containsValue(4798374));
        assertFalse(mHM.containsValue(1111111111));
        assertTrue(mHM.containsKey("SixteenthValue"));
        assertFalse(mHM.containsKey(null));
        assertTrue(mHM.containsKey("Sick"));
        mHM.put("TenthValue", 0);
        mHM.put("EleventhValue", 123);
        mHM.put("TwelfthValue", 123);
        mHM.put("ThirteenthValue", 123);
        mHM.put("FourteenthValue", 123);
        mHM.put("FifteenValue", null);
        mHM.put(null, 123);
        mHM.put("Testing", 1244444);
        mHM.put("ThirteenthValue1", 123);
        mHM.put("FourteenthValue2", 123);
        mHM.put("FifteenValue3", null);
        assertEquals(18, mHM.getSize());
        assertTrue(mHM.containsKey("TenthValue"));
        assertTrue(mHM.containsKey("FifteenValue"));
        assertFalse(mHM.containsKey("Linkin"));
    }

    @Test
    public void givenHashMapWhenAddMoreElementsThanInitialSizeThenResize(){
        assertEquals(0, mHM.getSize());
        mHM.put("SixteenthValue", 4798374);
        mHM.put("ABC", 675);
        mHM.put("Carmen", 414554);
        mHM.put("Katrin", 124785);
        mHM.put("Lady", 10099);
        mHM.put("Sick", 21476);
        mHM.put("AND", 11256717);
        mHM.put("TenthValue", 0);
        mHM.put("EleventhValue", 123);
        mHM.put("TwelfthValue", 123);
        mHM.put("ThirteenthValue", 123);
        mHM.put("FourteenthValue", 123);
        mHM.put("FifteenValue", null);
        mHM.put(null, 123);
        mHM.put("Testing", 1244444);
        mHM.put("ThirteenthValue1", 123);
        mHM.put("FourteenthValue2", 123);
        mHM.put("FifteenValue3", null);
        assertEquals(18, mHM.getSize());

    }

    @Test
    public void givenHashMapWhenPutNewElementsWithSameKeyThenAllExceptLastElementAreCleared(){
        mHM.put("Carmen", 414554);
        mHM.put("Carmen", 10099);
        mHM.put("Carmen", 21476);
        mHM.put("Carmen", 11256717);
        assertTrue(mHM.containsValue(11256717));
        assertFalse(mHM.containsValue(21476));
        assertFalse(mHM.containsValue(414554));
        assertFalse(mHM.containsValue(124785));
    }

    @Test
    public void givenHashMapWhenGetValuesThenValuesReturn() {
        mHM.put("TenthValue", 0);
        mHM.put("EleventhValue", 123);
        mHM.put("TwelfthValue", 123);
        mHM.put("ThirteenthValue", 123);
        mHM.put("FourteenthValue", 123);
        mHM.put("FifteenValue", null);
        mHM.put("SixteenthValue", 4798374);
        mHM.put("ABC", 675);
        mHM.put("Carmen", 414554);
        mHM.put("Katrin", 124785);
        mHM.put("Lady", 10099);
        mHM.put("Sick", 21476);
        mHM.replace("Sick", 11112);
        mHM.put("AND", 11256717);
        assertEquals((Integer) 124785, mHM.getValue("Katrin"));
        assertEquals((Integer) 414554, mHM.getValue("Carmen"));
        assertEquals((Integer) 10099, mHM.getValue("Lady"));
        assertNull(mHM.getValue("FifteenValue"));
        assertNull(mHM.getValue("amg"));
    }

    @Test
    public void givenHashMapWhenPutValuesThenResizeAndReturnCorrectSize() {
        mHM.put("TenthValue", 0);
        mHM.put("EleventhValue", 123);
        mHM.put("TwelfthValue", 123);
        mHM.put("ThirteenthValue", 123);
        mHM.put("FourteenthValue", 123);
        mHM.put("FifteenValue", null);
        mHM.put("SixteenthValue", 4798374);
        mHM.put("ABC", 675);
        mHM.put("Carmen", 414554);
        mHM.put("Katrin", 124785);
        mHM.put("Lady", 10099);
        mHM.put("Sick", 21476);
        mHM.put("AND", 11256717);
        mHM.put("EleventhValue11", 12324);
        mHM.put("TwelfthValue22", 123214);
        mHM.put("ThirteenthValue412e", 123);
        mHM.put("FourteenthValue124", 123);
        mHM.put("FifteenValue124214", null);
        mHM.put(null, 123);
        mHM.put("Testing", 1244444);
        mHM.put("ThirteenthValue1", 123);
        mHM.put("FourteenthValue2", 123);
        mHM.put("FifteenValue3", null);
        mHM.put("SixteenthValue124e", 4798374);
        mHM.put("ABC11", 675);
        mHM.put("Carme11n", 414554);
        mHM.put("Katrin12", 124785);
        mHM.put("Lady124", 10099);
        mHM.put("Sick1244", 21476);
        mHM.put("AND124", 11256717);
        assertEquals(30, mHM.getSize());
    }

    @Test
    public void givenHashMapWhenPutValuesThenCorrectReturnOfContainsKey() {
        mHM.put("EleventhValue11", 12324);
        mHM.put("TwelfthValue22", 123214);
        mHM.put("FourteenthValue124", 123);
        mHM.put("FifteenValue124214", null);
        assertTrue(mHM.containsKey("FifteenValue124214"));
        assertTrue(mHM.containsKey("FourteenthValue124"));
        assertTrue(mHM.containsKey("FourteenthValue124"));
        assertFalse(mHM.containsKey("213123"));
    }

    @Test
    public void givenHashMapWhenPutValuesThenCorrectReturnOfContainsValue() {
        mHM.put("EleventhValue11", 12324);
        mHM.put("TwelfthValue22", 123214);
        mHM.put("FourteenthValue124", 123);
        mHM.put("FifteenValue124214", null);
        assertTrue(mHM.containsValue(12324));
        assertTrue(mHM.containsValue(123));
        assertTrue(mHM.containsValue(123214));
        assertTrue(mHM.containsValue(null));
        assertFalse(mHM.containsValue(123142124));
    }
}
